# --- 課題① ---
# 空のリスト todo_list を作って、そこにタスク（文字列）を追加する関数 add_task(task) を作ろう。
# 追加後に現在のタスク数をprintで表示しよう。
# 動作確認として、関数を使って3つくらいタスクを追加してみてね。

# --- 課題② ---
# todo_list の中身をすべて表示する関数 show_tasks() を作ろう
# タスクが何もなければ「タスクはありません」と表示するようにしてね

# --- 課題③ ---
# タスクを削除する関数 remove_task(task) を作ろう
# 指定した task が todo_list にあれば削除して、「タスク '○○' を削除しました」と表示する
# 指定した task が見つからなければ「そのタスクは見つかりません」と表示する
# 動作確認として、存在するタスクと存在しないタスクの両方でテストしてみてね

# --- 課題④ ---
# タスクを「名前」と「期限」のセットで管理できるようにしよう。
# 1. todo_list はリストではなく、辞書（dict）を使って { "タスク名": "期限" } の形で保存する。
# 2. add_task(task, deadline) でタスク名と期限を追加する。
#    例: add_task("買い物に行く", "2025-08-20")
# 3. show_tasks() は、登録されているタスクと期限をすべて表示するようにする。
# 4. remove_task(task) は、タスク名を指定して削除できるようにする。
#
# 動作確認として、3つのタスクを登録 → 表示 → 1つ削除 → 再表示 の流れを試してね。

# --- 課題⑤ ---
# 今日の日付を基準にして、期限が過ぎているタスクをチェックする関数 check_deadlines() を作ろう
# 過ぎている場合は「タスク '○○' の期限が過ぎています」と表示する
# 過ぎていない場合は何も表示しなくてOK
# datetimeモジュールを使って、期限（文字列）を日付型に変換して比較してみてね
