# --- 課題① ---
# 空のリスト todo_list を作って、そこにタスク（文字列）を追加する関数 add_task(task) を作ろう。
# 追加後に現在のタスク数をprintで表示しよう。
# 動作確認として、関数を使って3つくらいタスクを追加してみてね。

# --- 課題② ---
# todo_list の中身をすべて表示する関数 show_tasks() を作ろう
# タスクが何もなければ「タスクはありません」と表示するようにしてね

# --- 課題③ ---
# タスクを削除する関数 remove_task(task) を作ろう
# 指定した task が todo_list にあれば削除して、「タスク '○○' を削除しました」と表示する
# 指定した task が見つからなければ「そのタスクは見つかりません」と表示する
# 動作確認として、存在するタスクと存在しないタスクの両方でテストしてみてね

# --- 課題④ ---
# タスクを「名前」と「期限」のセットで管理できるようにしよう。
# 1. todo_list はリストではなく、辞書（dict）を使って { "タスク名": "期限" } の形で保存する。
# 2. add_task(task, deadline) でタスク名と期限を追加する。
#    例: add_task("買い物に行く", "2025-08-20")
# 3. show_tasks() は、登録されているタスクと期限をすべて表示するようにする。
# 4. remove_task(task) は、タスク名を指定して削除できるようにする。
#
# 動作確認として、3つのタスクを登録 → 表示 → 1つ削除 → 再表示 の流れを試してね。

# --- 課題⑤ ---
# 今日の日付を基準にして、期限が過ぎているタスクをチェックする関数 check_deadlines() を作ろう
# 過ぎている場合は「タスク '○○' の期限が過ぎています」と表示する
# 過ぎていない場合は何も表示しなくてOK
# datetimeモジュールを使って、期限（文字列）を日付型に変換して比較してみてね

# --- 課題⑥ ---
# タスクに「完了フラグ(done)」を追加して管理できるようにしよう
# 1. todo_list の値を辞書にして、期限(deadline)と完了フラグ(done)を持たせる
#    例: { "買い物に行く": {"deadline": "2025-08-20", "done": False} }
# 2. mark_done(task) という関数を作り、指定したタスクを完了済みに変更できるようにする
#    完了したら「タスク '○○' を完了にしました」と表示する
# 3. show_tasks() 関数で一覧表示する際に、完了済みは [✓]、未完了は [ ] で表示する
# 4. add_task(task, deadline) はこれまで通りタスクと期限を追加する

# --- 課題⑦ ---
# タスクの「期限が近いもの」をチェックできるようにしよう。
#
# 1. check_upcoming(days) という関数を作る
#    - 引数 days に指定した日数以内に期限が迫っているタスクを表示する。
#    - 例: check_upcoming(3) → 今日から3日以内に期限が来るタスクを一覧表示。
#
# 2. 期限を過ぎているタスクは除外してOK（課題⑤でチェック済みなので）。
#
# 3. 表示フォーマットは自由だけど、タスク名と期限はわかるように。
#
# --- 動作確認例 ---
# - いくつか未来の日付のタスクを追加してから check_upcoming(3) を呼んでみる。
# - 3日以内のものだけ出力されることを確認してね。

# --- 課題⑧ ---
# 既存のタスクを編集できるようにしよう。
#
# 1. edit_task(old_task, new_task=None, new_deadline=None) という関数を作る
#    - old_task: 編集したいタスク名
#    - new_task: 新しいタスク名（指定があれば更新）
#    - new_deadline: 新しい期限（指定があれば更新）
#
# 2. 例えば、
#    edit_task("買い物に行く", new_task="スーパーに行く")
#    → タスク名を「スーパーに行く」に変更する
#
#    edit_task("読書をする", new_deadline="2025-08-30")
#    → 期限だけ変更する
#
#    edit_task("勉強する", new_task="Python勉強", new_deadline="2025-09-01")
#    → 両方変更する
#
# 3. 該当するタスクが見つからない場合は「そのタスクは見つかりません」と表示する
#
# 4. 成功した場合は「タスク '○○' を更新しました」と表示する
#
# --- 動作確認例 ---
# - タスクをいくつか追加
# - 名前だけ変更
# - 期限だけ変更
# - 両方変更
# - 存在しないタスクを編集しようとしてエラー確認
